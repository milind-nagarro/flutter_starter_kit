//
//  FacetecBaseViewController.swift
//
//
//  Created by Sameer thapa on 21/03/22.
//

import UIKit
import FaceTecSDK

class FacetecBaseViewController: UIViewController, URLSessionDelegate {
    var result: FlutterResult?
    var latestProcessor: Processor!
    override func viewDidLoad() {
        super.viewDidLoad()
        // Initialize FaceTec SDK
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { [weak self] initializationSuccessful in
            if(initializationSuccessful) {
                self?.checkAction()
            } else {
                self?.result?(false)
                self?.dismiss(animated: true) {}
            }
        })
        // Do any additional setup after loading the view.
    }

    func onComplete() {
        
        if self.latestProcessor.isSuccess() {
            debugPrint("Success")
            result?(true)
        }
        else {
            debugPrint("early exit")
            result?(false)
        }
        dismiss(animated: true)
    }

    @IBAction func checkAction() {
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
        getSessionToken() { sessionToken in
            self.latestProcessor = LivenessCheckProcessor(sessionToken: sessionToken, fromViewController: self)
        }
    }
    
    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        
        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: {[weak self] data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                debugPrint("Exception raised while attempting HTTPS call.")
                self?.result?(false)
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as! [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil)
                {
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                }
                else {
                    self?.result?(false)
                    debugPrint("Exception raised while attempting HTTPS call.")
                }
            }
        })
        task.resume()
    }
}
